//@version=5
strategy("Buy and Sell")//@version=5

// Define sma function
sma(series, length) =>
    sum = 0.0
    for i = 0 to length - 1
        sum := sum + series[i]
    sum / length

// Define ema function
ema(series, length) //@version=5
strategy("Buy and Sell")//@version=5

// Define sma function
sma(series, length) =>
    sum = 0.0
    for i = 0 to length - 1
        sum := sum + series[i]
    sum / length

// Define ema function
ema(series, length) =>
    alpha = 2 / (length + 1)
    ema = series[0]
    for i = 1 to length - 1
        ema := alpha * series[i] + (1 - alpha) * ema
    ema

// Define low function
low(length) =>
    lowest = low[1]
    for i = 2 to length
        if low[i] < lowest
            lowest := low[i]
    lowest

// Define high function
high(length) =>
    highest = high[1]
    for i = 2 to length
        if high[i] > highest
            highest := high[i]
    highest

// Define color values
orange = color.orange
yellow = color.yellow  // yellow color
green = color.green  // green color
red = color.red // red color
blue = color.blue  // blue color

// Define variables for moving averages and trend lines
smaLength = 14
emaLength = 20
supportLineLength = 50
resistanceLineLength = 50

// Define the max function
max(a, b) =>
    if a > b
        a
    else
        b

// Define a custom abs function
custom_abs(value) =>
    if value >= 0
        value
    else
        -value

// Define sum

// Define the ATR function
atr(length) =>
    sum = 0.0
    for i = 0 to length - 1
        sum := sum + max(high[i] - low[i], custom_abs(high[i] - close[i + 1]))
    sum / length

// Define the trailing_stop() function
trailing_stop(label, stop, trail_offset, sum) =>
    // Define stopValue as a local variable
    stopValue = stop
    // Declare a new variable to hold the updated sum value
    updatedSum = sum
    // Loop through the candles in the current timeframe
    for i = 0 to bar_index
        // If the current close is greater than the stop value, update the stop value and the sum value
        if close[i] > stopValue
            stopValue := close[i] - trail_offset
            updatedSum := updatedSum + 1
        // If the current close is less than the stop value, exit the trade
        else if strategy.position_size > 0 and low[i] < stopValue
            strategy.exit(label)
            break

    // Loop through the candles in the current timeframe
    for i = 0 to bar_index
        // If the current close is greater than the stop value, update the stop value
        if close[i] > stopValue
            stopValue := close[i] - trail_offset
        // If the current close is less than the stop value, exit the loop
        else
            break

    // Set the trailing stop for the given label
    strategy.exit(label, stop=stopValue)

// Calculate moving averages
sma = sma(close, smaLength)
ema = ema(close, emaLength)

// Calculate trend lines
trendLine = (high + low + close) / 3
supportLine = low(supportLineLength)
resistanceLine = high(resistanceLineLength)

// Plot moving averages and trend lines on chart
plot(sma, color=orange, linewidth=2)
plot(ema, color=yellow, linewidth=2)
plot(trendLine, color=blue, linewidth=2)
plot(supportLine, color=red, linewidth=2)
plot(resistanceLine, color=red, linewidth=2)

// === INPUT BACKTEST RANGE ===
fromMonth = input.int(defval = 10, title = "From Month", minval = 1, maxval = 12)
fromDay = input.int(defval = 1, title = "From Day", minval = 1, maxval = 31)
fromYear = input.int(defval = 2022, title = "From Year", minval = 1970)
thruMonth = input.int(defval = 11, title = "Thru Month", minval = 1, maxval = 12)
thruDay = input.int(defval = 1, title = "Thru Day", minval = 1, maxval = 31)
thruYear = input.int(defval = 2112, title = "Thru Year", minval = 1970)

// === INPUT SHOW PLOT ===
showDate = input(defval = true, title = "Show Date Range")

// === FUNCTION EXAMPLE ===
start = timestamp(fromYear, fromMonth, fromDay, 00, 00) // backtest start window
finish = timestamp(thruYear, thruMonth, thruDay, 23, 59) // backtest finish window
withinWindow = time >= start and time <= finish

// Define variables for long and short entry conditions
longEntry = (sma > ema) and (close > trendLine) and withinWindow
shortEntry = (sma < ema) and (close < trendLine) and withinWindow

// Define variables for long and short exit conditions
longExit = (close < sma) or (close < ema) or (close < supportLine)
shortExit = (close > sma) or (close > ema) or (close > resistanceLine)

// Set plot colors for long and short entry and exit conditions
plotshape(longEntry, title='Long Entry', style=shape.triangleup, color=green, location=location.belowbar)
plotshape(shortEntry, title='Short Entry', style=shape.triangledown, color=red, location=location.abovebar)
plotshape(longExit, title='Long Exit', style=shape.cross, color=orange, location=location.belowbar)
plotshape(shortExit, title='Short Exit', style=shape.cross, color=orange, location=location.abovebar)

//Define long entry
if longEntry
    strategy.entry("Long", strategy.long, stop=low[1], limit=high[1])
    strategy.exit("Long Exit", trail_offset=3*atr(14))

// Define short entry
if shortEntry
    strategy.entry("Short", strategy.short, stop=high[1], limit=low[1])
    strategy.exit("Short Exit", trail_offset=3*atr(14))

// Define long exit
if longExit
    strategy.exit("Long Exit", profit=220)

// Define short exit
if shortExit
    strategy.exit("Short Exit", profit=220)
// Define the profit target function
profitTarget(label, target) =>
    // Check if the current loss exceeds the profit target
    if strategy.position_size > 0 and strategy.position_avg_price - low[0] > target
        // If the current loss exceeds the profit target, exit the long trade
        strategy.exit(label)
    else if strategy.position_size < 0 and high[0] - strategy.position_avg_price > target
        // If the current loss exceeds the profit target, exit the short trade
        strategy.exit(label)
// Draw a triangle down on the chart with the text "SL"
plotshape(series=close, title="Stop Loss Triggered", text="", style=shape.flag, color=color.white, location=location.top)

// Define the stop loss function
stopLoss(label, stop) =>
    // Check if the current low is less than the stop loss price
    if strategy.position_size > 0 and low[0] < stop
        // If the current low is less than the stop loss price, exit the trade
        strategy.exit(label)
    alpha = 2 / (length + 1)
    ema = series[0]
    for i = 1 to length - 1
        ema := alpha * series[i] + (1 - alpha) * ema
    ema

// Define low function
low(length) =>
    lowest = low[1]
    for i = 2 to length
        if low[i] < lowest
            lowest := low[i]
    lowest

// Define high function
high(length) =>
    highest = high[1]
    for i = 2 to length
        if high[i] > highest
            highest := high[i]
    highest

// Define color values
orange = color.orange
yellow = color.yellow  // yellow color
green = color.green  // green color
red = color.red // red color
blue = color.blue  // blue color

// Define variables for moving averages and trend lines
smaLength = 14
emaLength = 20
supportLineLength = 50
resistanceLineLength = 50

// Define the max function
max(a, b) =>
    if a > b
        a
    else
        b

// Define a custom abs function
custom_abs(value) =>
    if value >= 0
        value
    else
        -value

// Define sum

// Define the ATR function
atr(length) =>
    sum = 0.0
    for i = 0 to length - 1
        sum := sum + max(high[i] - low[i], custom_abs(high[i] - close[i + 1]))
    sum / length

// Define the trailing_stop() function
trailing_stop(label, stop, trail_offset, sum) =>
    // Define stopValue as a local variable
    stopValue = stop
    // Declare a new variable to hold the updated sum value
    updatedSum = sum
    // Loop through the candles in the current timeframe
    for i = 0 to bar_index
        // If the current close is greater than the stop value, update the stop value and the sum value
        if close[i] > stopValue
            stopValue := close[i] - trail_offset
            updatedSum := updatedSum + 1
        // If the current close is less than the stop value, exit the trade
        else if strategy.position_size > 0 and low[i] < stopValue
            strategy.exit(label)
            break

    // Loop through the candles in the current timeframe
    for i = 0 to bar_index
        // If the current close is greater than the stop value, update the stop value
        if close[i] > stopValue
            stopValue := close[i] - trail_offset
        // If the current close is less than the stop value, exit the loop
        else
            break

    // Set the trailing stop for the given label
    strategy.exit(label, stop=stopValue)

// Calculate moving averages
sma = sma(close, smaLength)
ema = ema(close, emaLength)

// Calculate trend lines
trendLine = (high + low + close) / 3
supportLine = low(supportLineLength)
resistanceLine = high(resistanceLineLength)

// Plot moving averages and trend lines on chart
plot(sma, color=orange, linewidth=2)
plot(ema, color=yellow, linewidth=2)
plot(trendLine, color=blue, linewidth=2)
plot(supportLine, color=red, linewidth=2)
plot(resistanceLine, color=red, linewidth=2)

// Define variables for long and short entry conditions
longEntry = (sma > ema) and (close > trendLine)
shortEntry = (sma < ema) and (close < trendLine)

// Define variables for long and short exit conditions
longExit = (close < sma) or (close < ema) or (close < supportLine)
shortExit = (close > sma) or (close > ema) or (close > resistanceLine)

// Set plot colors for long and short entry and exit conditions
plotshape(longEntry, title='Long Entry', style=shape.triangleup, color=green, location=location.belowbar)
plotshape(shortEntry, title='Short Entry', style=shape.triangledown, color=red, location=location.abovebar)
plotshape(longExit, title='Long Exit', style=shape.cross, color=orange, location=location.belowbar)
plotshape(shortExit, title='Short Exit', style=shape.cross, color=orange, location=location.abovebar)

//Define long entry
if longEntry
    strategy.entry("Long", strategy.long, stop=low[1], limit=high[1])
    strategy.exit("Long Exit", trail_offset=3*atr(14))

// Define short entry
if shortEntry
    strategy.entry("Short", strategy.short, stop=high[1], limit=low[1])
    strategy.exit("Short Exit", trail_offset=3*atr(14))

// Define long exit
if longExit
    strategy.exit("Long Exit", profit=220)

// Define short exit
if shortExit
    strategy.exit("Short Exit", profit=220)
// Define the profit target function
profitTarget(label, target) =>
    // Check if the current loss exceeds the profit target
    if strategy.position_size > 0 and strategy.position_avg_price - low[0] > target
        // If the current loss exceeds the profit target, exit the long trade
        strategy.exit(label)
    else if strategy.position_size < 0 and high[0] - strategy.position_avg_price > target
        // If the current loss exceeds the profit target, exit the short trade
        strategy.exit(label)
// Draw a triangle down on the chart with the text "SL"
plotshape(series=close, title="Stop Loss Triggered", text="", style=shape.flag, color=color.white, location=location.top)

// Define the stop loss function
stopLoss(label, stop) =>
    // Check if the current low is less than the stop loss price
    if strategy.position_size > 0 and low[0] < stop
        // If the current low is less than the stop loss price, exit the trade
        strategy.exit(label)
