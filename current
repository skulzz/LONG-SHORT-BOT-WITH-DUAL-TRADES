from flask import Flask, request
import pyzmail
import json
import imapclient
import bybit
import imaplib
import time
import email

app = Flask(__name__)

def execute_trade_from_email():
    # Connect to email server
    imap_client = imapclient.IMAPClient('imap.example.com', ssl=True)
    imap_client.login('username', 'password')
    imap_client.select_folder('INBOX')

    # Search for email with desired data
    search_criteria = ['SUBJECT', 'Trade Data']
    uid_list = imap_client.search(search_criteria)
    email = imap_client.fetch([uid_list[0]], ['BODY[]'])
    email_text = email[uid_list[0]][b'BODY[]'].decode()
    return email_text
    
@app.route('/ex', methods=['POST'])
def execute_trade():
    # Parse the email using pyzmail
    email_body = request.form['body']
    mail = pyzmail.PyzMessage.factory(email_body)
    email_text = mail.text_part.get_payload().decode(mail.text_part.charset)
    # Extract the relevant information from the email
    passphrase = email_text.split("Passphrase: ")[1].split("\n")[0]
    strategy_position_size = email_text.split("Position size: ")[1].split("\n")[0]
    strategy_order_action = email_text.split("Order action: ")[1].split("\n")[0]
    strategy_order_contracts = email_text.split("Order contracts: ")[1].split("\n")[0]
    strategy_order_price = email_text.split("Order price: ")[1].split("\n")[0]
    strategy_order_id = email_text.split("Order ID: ")[1].split("\n")[0]
    strategy_market_position = email_text.split("Market position: ")[1].split("\n")[0]
    strategy_market_position_size = email_text.split("Market position size: ")[1].split("\n")[0]
    strategy_prev_market_position = email_text.split("Previous market position: ")[1].split("\n")[0]
    strategy_prev_market_position_size = email_text.split("Previous market position size: ")[1].split("\n")[0]

# Connect to the IMAP server
imap_server = imaplib.IMAP4_SSL("imap-mail.outlook.com",993)
imap_server.login("sterxus@outlook.com","TheMando321!")

# Select the inbox as the current mailbox
imap_server.select("inbox")

while True:
    # Check for new emails
    result, data = imap_server.search(None, "UNSEEN")
    email_ids = data[0].split()

    # Process the new emails
    for email_id in email_ids:
        result, data = imap_server.fetch(email_id, "(RFC822)")
        email_message = email.message_from_bytes(data[0][1])

        # Extract the relevant information from the email
        sender = email_message["From"]
        subject = email_message["Subject"]
        body = email_message.get_payload()

        # Do something with the email information, such as logging it or triggering a trade
        print("From:", sender)
        print("Subject:", subject)
        print("Body:", body)

    # Wait for 20 seconds before checking for new emails again
    time.sleep(500)

# Parse the email
email = emails[-1]

# Get the body of the email
email_body = email.text_part.get_payload().decode(email.text_part.charset)

# Extract the passphrase from the email
passphrase = email_body.split('Passphrase: ')[1].split('\n')[0]

    # Define json data

json_data = {
    "passphrase": passphrase,
    "time": "{{timenow}}",
    "exchange": "{{exchange}}",
    "ticker": "{{ticker}}",
    "bar": {
        "time": "{{ticker}}",
        "open": "{{open}}",
        "high": "{{high}}",
        "low": "{{low}}",
        "close": "{{close}}",
        "volume": "{{volume}}",
    },
    "strategy": {
        "side": "side",
        "symbol": "symbol",
        "order_type": "Limit",
        "qty": "qty",
        "price": "price",
        "time_in_force": "GoodTillCancel"
    }
}
    # Check if the passphrase in the email matches the expected passphrase
expected_passphrase = "a321!"
if passphrase != expected_passphrase:
    print("Invalid passphrase. Trade not executed.")
# Check if the passphrase in the email matches the passphrase in the json data
#if passphrase != json_data["passphrase"]:
#   else return "Error: Incorrect passphrase."

# Extract the other information from the email
# Initialize the Bybit client
client = bybit.BybitClient(api_key='YOUR_API_KEY', secret_key='YOUR_SECRET_KEY')

# Authenticate using your API key
#client.authenticate(api_key=json_data["api_key"], secret_key=json_data["secret_key"])

    # Place the order
order_response = client.Order.Order_new(side=json_data["strategy"]["side"], symbol=json_data["strategy"]["symbol"], order_type=json_data["strategy"]["order_type"], qty=json_data["strategy"]["qty"], price=json_data["strategy"]["price"], time_in_force=json_data["strategy"]["time_in_force"]).result()

# Print the response
print(order_response)

# Get the order ID from the response
order_id = order_response["result"]["order_id"]

# Get the order details
order_details = bybit.Order.Order_query(symbol=json_data["ticker"], order_id=order_id).result()

# Print the order details
print(order_details)

# Check the status of the order
status = order_details["result"]["order_status"]

# If the order is filled, print a message
if status == "Filled":
    print("Order filled!")
else:
    print("Order not filled.")
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        # Search for new emails
    _, msg_ids = conn.search(None, 'UNSEEN')
    msg_ids = msg_ids[0].split()

    # Iterate through new emails
    for msg_id in msg_ids:
        _, msg_data = conn.fetch(msg_id, "(RFC822)")
        msg = pyzmail.PyzMessage.factory(msg_data[0][1])

        # Check if email is from the correct sender
        if msg.get_address("from")[1] == "sender@example.com":
            # Parse email body
            email_body = msg.text_part.get_payload().decode(msg.text_part.charset)

            # Extract necessary information from email
            timenow = email_body.split("Time: ")[1].split("\n")[0]
            exchange = email_body.split("Exchange: ")[1].split("\n")[0]
            ticker = email_body.split("Ticker: ")[1].split("\n")[0]
            open_price = email_body.split("Open: ")[1].split("\n")[0]
            high_price = email_body.split("High: ")[1].split("\n")[0]
            low_price = email_body.split("Low: ")[1].split("\n")[0]
            close_price = email_body.split("Close: ")[1].split("\n")[0]
            volume = email_body.split("Volume: ")[1].split("\n")[0]
            
            
            
            
            from imapclient import IMAPClient

imap_server = IMAPClient('imap.example.com')
imap_server.login('myuser', 'mypassword')

imap_server.select_folder('INBOX')

# Search for mails with specific keyword in the subject
emails = imap_server.search(['SUBJECT "Your keyword"'])

messages = imap_server.fetch(emails, ['BODY[]'])

# Process the new emails
for email_id, email_data in messages.items():

 








# Iterate through each email
for email_id in emails:
    email = imap_obj.fetch([email_id], ['BODY[]'])

    # Get the body of the email
    email_body = email[email_id][b'BODY[]'].decode()

    # Extract the passphrase from the email
    passphrase = email_body.split('Passphrase: ')[1].split('\n')[0]

    # Define json data
    json_data = {
        "passphrase": passphrase,
        "time": "{{timenow}}",
        "exchange": "{{exchange}}",
        "ticker": "{{ticker}}",
        "bar": {
            "time": "{{ticker}}",
            "open": "{{open}}",
            "high": "{{high}}",
            "low": "{{low}}",
            "close": "{{close}}",
            "volume": "{{volume}}",
        },
        "strategy": {
            "side": "side",
            "symbol": "symbol",
            "order_type": "Limit",
            "qty": "qty",
            "price": "price",
            "time_in_force": "GoodTillCancel"
        }
    }
    print(json_data)
Note that this code is just a sample and you will need to replace the placeholders such as 'imap.example.com', 'your_username', 'your_password' with the appropriate values for your email server. Also, you will need to fill in the values for the other placeholders in the json_data such as {{timenow}}, {{exchange}}, {{ticker}} and so on.





