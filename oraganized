from flask import Flask, request
import pyzmail
import json
import imapclient
import bybit
import time
import email
import re
from imapclient import IMAPClient

app = Flask(__name__)


@app.route('/ex', methods=['POST'])
# Connect to email server
# Search for email with desired data
# search_criteria = ['SUBJECT', 'Trade Data']
# uid_list = imap_client.search(search_criteria)
# email = imap_client.fetch([uid_list[0]], ['BODY[]'])
# email_text = email[uid_list[0]][b'BODY[]'].decode()
# return email_text

def execute_trade():
    imap_server = IMAPClient('imap-mail.outlook.com",993')
    imap_server.login('sterxus@outlook.com', 'TheMando321!')
    imap_server.select_folder('INBOX')
# messages = imap_server.fetch(emails, ['BODY[]'])
    while True:
        unseen_mails = imap_server.search(['UNSEEN'])
        # messagess = imap_server.fetch(unseen_mails, ['BODY[]'])
# Search for mails with specific keyword in the subject
# emails = imap_server.search(['SUBJECT "Alert:"'])


# Process the new emails
        for email_id, email_data in imap_server.fetch(unseen_mails, 'RFC822').items():
    # Iterate through the messages
         email_body = email_data.get_body().decode()
        # Extract the relevant information from the email
         passphrase = email_body.split("Passphrase: ")[1].split("\n")[0]
         strategy_position_size = email_body.split("Position size: ")[1].split("\n")[0]
         strategy_order_action = email_body.split("Order action: ")[1].split("\n")[0]
         strategy_order_contracts = email_body.split("Order contracts: ")[1].split("\n")[0]
         strategy_order_price = email_body.split("Order price: ")[1].split("\n")[0]
         strategy_order_id = email_body.split("Order ID: ")[1].split("\n")[0]
         strategy_market_position = email_body.split("Market position: ")[1].split("\n")[0]
         strategy_market_position_size = email_body.split("Market position size: ")[1].split("\n")[0]
         strategy_prev_market_position = email_body.split("Previous market position: ")[1].split("\n")[0]
         strategy_prev_market_position_size = email_body.split("Previous market position size: ")[1].split("\n")[0]
        # Mark the message as seen
        unseen_mails.mark_seen([email_id])
        # Sleep for a few seconds before checking for new messages again
        time.sleep(5)








from flask import Flask, request
import pyzmail
import json
import imapclient
import bybit
import time
import email
import re
from imapclient import IMAPClient

app = Flask(__name__)


@app.route('/ex', methods=['POST'])
# Connect to email server
# Search for email with desired data
# search_criteria = ['SUBJECT', 'Trade Data']
# uid_list = imap_client.search(search_criteria)
# email = imap_client.fetch([uid_list[0]], ['BODY[]'])
# email_text = email[uid_list[0]][b'BODY[]'].decode()
# return email_text

def execute_trade():
    imap_server = IMAPClient('imap-mail.outlook.com",993')
    imap_server.login('', '')
    imap_server.select_folder('INBOX')
# messages = imap_server.fetch(emails, ['BODY[]'])
    while True:
        unseen_mails = imap_server.search(['UNSEEN'])
        # messagess = imap_server.fetch(unseen_mails, ['BODY[]'])
# Search for mails with specific keyword in the subject
# emails = imap_server.search(['SUBJECT "Alert:"'])



if json_data.get("passphrase") != expected_passphrase:
    print("Invalid passphrase. Trade not executed.")
    exit()
# Extract the other information from the email
api_key = json_data["api_key"]
secret_key = json_data["secret_key"]
strategy = json_data["strategy"]

# Initialize the Bybit client
client = bybit.BybitClient(api_key=api_key, secret_key=secret_key)

# Place the order
order_response = client.Order.Order_new(side=strategy["side"], symbol=strategy["symbol"], order_type=strategy["order_type"],
                                        qty=strategy["qty"], price=strategy["price"], time_in_force=strategy["time_in_force"]).result()

# Print the response
print(order_response)

# Get the order ID from the response
order_id = order_response["result"]["order_id"]

# Get the order details
order_details = client.Order.Order_query(symbol=json_data["ticker"], order_id=order_id).result()

# Print the order details
print(order_details)

# Check the status of the order
status = order_details["result"]["order_status"]

# If the order is filled, print a message
if status == "Filled":
    print("Order filled!")
else:
    print("Order not filled.")

# Process the new emails
        for email_id, email_data in unseen_mails.fetch(unseen_mails, 'RFC822').items():
    # Iterate through the messages
         email_body = unseen_mails.get_body().decode()
        # Extract the relevant information from the email
         passphrase = email_body.split("Passphrase: ")[1].split("\n")[0]
         strategy_position_size = email_body.split("Position size: ")[1].split("\n")[0]
         strategy_order_action = email_body.split("Order action: ")[1].split("\n")[0]
         strategy_order_contracts = email_body.split("Order contracts: ")[1].split("\n")[0]
         strategy_order_price = email_body.split("Order price: ")[1].split("\n")[0]
         strategy_order_id = email_body.split("Order ID: ")[1].split("\n")[0]
         strategy_market_position = email_body.split("Market position: ")[1].split("\n")[0]
         strategy_market_position_size = email_body.split("Market position size: ")[1].split("\n")[0]
         strategy_prev_market_position = email_body.split("Previous market position: ")[1].split("\n")[0]
         strategy_prev_market_position_size = email_body.split("Previous market position size: ")[1].split("\n")[0]
        # Mark the message as seen
        unseen_mails.mark_seen([email_id])
        # Sleep for a few seconds before checking for new messages again
        time.sleep(5)
    # Log out of the email server
    # # imap_server.logout()
    # Define json data
json_data = {
    "passphrase": "{{passphrase}}",
    "time": "{{timenow}}",
    "exchange": "{{exchange}}",
    "ticker": "{{ticker}}",
    "bar": {
        "time": "{{ticker}}",
        "open": "{{open}}",
        "high": "{{high}}",
        "low": "{{low}}",
            "close": "{{close}}",
            "volume": "{{volume}}",
        },
        "strategy": {
            "side": "side",
            "symbol": "symbol",
            "order_type": "Limit",
            "qty": "qty",
            "price": "price",
            "time_in_force": "GoodTillCancel"
        }
}
    # Check if the passphrase in the email matches the expected passphrase
expected_passphrase = "a321!"
request =json.loads(json_data)
if "passphrase" != expected_passphrase:
    print("Invalid passphrase. Trade not executed.")
# Check if the passphrase in the email matches the passphrase in the json data
# if passphrase != json_data["passphrase"]:
#   else return "Error: Incorrect passphrase."

# Extract the other information from the email
# Initialize the Bybit client
client = bybit.BybitClient(api_key='YOUR_API_KEY',
                           secret_key='YOUR_SECRET_KEY')

# Authenticate using your API key
# client.authenticate(api_key=json_data["api_key"], secret_key=json_data["secret_key"])

# Place the order
order_response = client.Order.Order_new(side=json_data["strategy"]["side"], symbol=json_data["strategy"]["symbol"], order_type=json_data["strategy"]
                                        ["order_type"], qty=json_data["strategy"]["qty"], price=json_data["strategy"]["price"], time_in_force=json_data["strategy"]["time_in_force"]).result()

# Print the response
print(order_response)

# Get the order ID from the response
order_id = order_response["result"]["order_id"]

# Get the order details
order_details = bybit.Order.Order_query(
    symbol=json_data["ticker"], order_id=order_id).result()

# Print the order details
print(order_details)

# Check the status of the order
status = order_details["result"]["order_status"]

# If the order is filled, print a message
if status == "Filled":
    print("Order filled!")
else:
    print("Order not filled.")
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Check if the passphrase in the email matches the expected passphrase
expected_passphrase = "a321!"
if json_data["passphrase"] != expected_passphrase:
    print("Invalid passphrase. Trade not executed.")
    return

# Extract the other information from the email
api_key = json_data["api_key"]
secret_key = json_data["secret_key"]
strategy = json_data["strategy"]

# Initialize the Bybit client
client = bybit.BybitClient(api_key=api_key, secret_key=secret_key)

# Place the order
order_response = client.Order.Order_new(side=strategy["side"], symbol=strategy["symbol"], order_type=strategy["order_type"],
                                        qty=strategy["qty"], price=strategy["price"], time_in_force=strategy["time_in_force"]).result()

# Print the response
print(order_response)

# Get the order ID from the response
order_id = order_response["result"]["order_id"]

# Get the order details
order_details = client.Order.Order_query(symbol=json_data["ticker"], order_id=order_id).result()

# Print the order details
print(order_details)

# Check the status of the order
status = order_details["result"]["order_status"]

# If the order is filled, print a message
if status == "Filled":
    print("Order filled!")
else:
    print("Order not filled.")
    
    
    
    
    
    
    
    
    
    
    
    
    json_data = {
    "passphrase": "a321!",
    "time": "2023-01-30T12:00:00Z",
    "exchange": "NYSEMkt",
    "ticker": "AAPL",
    "bar": {
        "time": "2023-01-30T12:00:00Z",
        "open": 132.5,
        "high": 135.0,
        "low": 131.0,
        "close": 132.0,
        "volume": 100000
    },
    "strategy": {
        "position_size": 10,
        "order_action": "buy",
        "order_contracts": 10,
        "order_price": 132.0,
        "order_id": "Close position order",
        "market_position": "long",
        "market_position_size": 10,
        "prev_market_position": "short"
    },
    "account": {
        "side": "buy",
        "symbol": "AAPL",
        "order_type": "Limit",
        "qty": 100,
        "price": 132.0,
        "time_in_force": "GoodTillCancel"
    }
}
    
    
    
    
    


# Load the data
json_data = json.loads(data)

# Access the values in the dictionary
passphrase = json_data["passphrase"]
time = json_data["time"]
exchange = json_data["exchange"]
ticker = json_data["ticker"]
bar = json_data["bar"]
strategy = json_data.get("strategy", {})
account = json_data.get("account", {})

# Access the values within the bar dictionary
bar_time = bar["time"]
bar_open = bar["open"]
bar_high = bar["high"]
bar_low = bar["low"]
bar_close = bar["close"]
bar_volume = bar["volume"]

# Access the values within the strategy dictionary
position_size = strategy.get("position_size", "")
order_action = strategy.get("order_action", "")
order_contracts = strategy.get("order_contracts", "")
order_price = strategy.get("order_price", "")
order_id = strategy.get("order_id", "")
market_position = strategy.get("market_position", "")
market_position_size = strategy.get("market_position_size", "")
prev_market_position = strategy.get("prev_market_position", "")

# Access the values within the account dictionary
side = account.get("side", "")
symbol = account.get("symbol", "")
order_type = account.get("order_type", "")
qty = account.get("qty", "")
price = account.get("price", "")
time_in_force = account.get("time_in_force", "")

# Print the values
print("Passphrase:", passphrase)
print("Time:", time)
print("Exchange:", exchange)
print("Ticker:", ticker)
print("Bar Time:", bar_time)
print("Bar Open:", bar_open)
print("Bar High:", bar_high)
print("Bar Low:", bar_low)
print("Bar Close:", bar_close)
print("Bar Volume:", bar_volume)
print("Position Size:", position_size)
print("Order Action:", order_action)
print("Order Contracts:", order_contracts)
print("Order Price:", order_price)
print("Order ID:", order_id)
print("Market Position:", market_position)
print("Market Position Size:", market_position_size)
print("Prev Market Position:", prev_market_position)
print("Side:", side)
print("Symbol:", symbol)
print("Order Type:", order_type)
print("Qty:", qty)
print("Price:", price)
print("Time In Force:", time_in_force)



expected_passphrase = "a321!"
if "passphrase" in json_data and json_data["passphrase"] != expected_passphrase:
    print("Invalid passphrase. Trade not executed.")
    exit()




expected_passphrase = "a321!"
passphrase = json_data.get("passphrase", None)
if passphrase != expected_passphrase:
    print("Invalid passphrase. Trade not executed.")
    exit()
