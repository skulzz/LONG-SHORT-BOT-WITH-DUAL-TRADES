def get_json_data(email_body):
    json_data = json.loads(email_body)
    return json_data

email_body = """
{
    "data": {
        "message": "This is a test message"
    }
}
"""

json_data = get_json_data(email_body)
print(json_data)
















py
Traceback (most recent call last):
  File "/home/j/py/app.py", line 43, in <module>
    json_data = get_json_data(email_body)
TypeError: get_json_data() takes 0 positional arguments but 1 was given
   
   
   
   File "/home/j/.local/lib/python3.10/site-packages/flask/app.py", line 2548, in __call__

    return self.wsgi_app(environ, start_response)

    File "/home/j/.local/lib/python3.10/site-packages/flask/app.py", line 2528, in wsgi_app

    response = self.handle_exception(e)

    File "/home/j/.local/lib/python3.10/site-packages/flask/app.py", line 2525, in wsgi_app

    response = self.full_dispatch_request()

    File "/home/j/.local/lib/python3.10/site-packages/flask/app.py", line 1822, in full_dispatch_request

    rv = self.handle_user_exception(e)

    File "/home/j/.local/lib/python3.10/site-packages/flask/app.py", line 1820, in full_dispatch_request

    rv = self.dispatch_request()

    File "/home/j/.local/lib/python3.10/site-packages/flask/app.py", line 1796, in dispatch_request

    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)

    TypeError: get_json_data() missing 1 required positional argument: 'email_body'


app = Flask(__name__)
app.debug = True
@app.route("/email", methods=['POST', 'GET'])
def get_json_data(email_body):
    #check if email body is in JSON format
    try:
        return json.loads(email_body)
    except:
        return None

def parse_json_data(json_data):
    # parse json data to get required information
    parsed_data = {}
    if "order_price" in json_data:
        parsed_data["order_price"] = json_data["order_price"]
    if "account_symbol" in json_data:
        parsed_data["account_symbol"] = json_data["account_symbol"]
    if "account_side" in json_data:
        parsed_data["account_side"] = json_data["account_side"]
    if "account_volume" in json_data:
        parsed_data["account_volume"] = json_data["account_volume"]
    return parsed_data

conn = imaplib.IMAP4_SSL("imap.gmx.com")
conn.login("skullze@gmx.com", "Mando321!")
conn.select("inbox")

_, email_data = conn.search(None, "ALL")
email_ids = email_data[0].split()

for email_id in email_ids:
    _, email_info = conn.fetch(email_id, "(RFC822)")
    email_body = email_info[0][1].decode("utf-8")
    json_data = get_json_data(email_body)
    if json_data:
        parsed_data = parse_json_data(json_data)
        account_symbol = parsed_data.get("symbol")
        account_volume = parsed_data.get("volume")
        account_side = parsed_data.get("side")
        order_price = parsed_data.get("volume")
def print(parsed_data):
    if parsed_data:
       client = bybit.bybit(test=False, api_key="76QjbsflcrBdSZiSrU",
                     api_secret="SGAAHPUfQnTm1d1EX12ffVaizjbFA4iT32ps")
       if account_side and account_symbol and account_volume:
        print(client.Order.Order_new(side=account_side, symbol=account_symbol, order_type="limit",
        qty=account_volume, price=order_price, time_in_force="gtc").result())
       else:
        print("Cannot place order 'parsed_data' ")
  
        print(client.Order.Order_query(symbol='account_symbol').result())
# My Position
        print(client.Positions.Positions_myPosition(
            symbol=account_symbol).result())

if __name__ == '__main__':

 app.run(port=5003)















import json

conn = imaplib.IMAP4_SSL("imap.gmail.com")
conn.login("user@gmail.com", "password")
conn.select("inbox")

_, email_data = conn.search(None, "ALL")
email_ids = email_data[0].split()

for email_id in email_ids:
    _, email_info = conn.fetch(email_id, "(RFC822)")
    email_body = email_info[0][1].decode("utf-8")
    json_data = get_json_data(email_body)
    if json_data:
        parsed_data = parse_json_data(json_data)
        account_symbol = parsed_data.get("symbol")
        client.Order.Order_new(
            symbol=parsed_data.get("symbol"),
            clOrdID=parsed_data.get("clOrdID"),
            ordType=parsed_data.get("ordType"),
            side=parsed_data.get("side"),
            orderQty=parsed_data.get("orderQty"),
            price=parsed_data.get("price"),
            stopPx=parsed_data.get("stopPx")
        )
        client.Order.Order_amend(
            symbol=account_symbol,
            orderID=parsed_data.get("orderID"),
            orderQty=parsed_data.get("orderQty"),
            price=parsed_data.get("price"),
            stopPx=parsed_data.get("stopPx")
        )
        conn.logout()
        return parsed_data
    else:
        conn.logout()
return None

def get_json_data(email_body):
    #check if email body is in JSON format
    try:
        return json.loads(email_body)
    except:
        return None

def parse_json_data(json_data):
    # parse json data to get required information
    parsed_data = {}
    if "order_id" in json_data:
        parsed_data["order_id"] = json_data["order_id"]
    if "symbol" in json_data:
        parsed_data["symbol"] = json_data["symbol"]
    if "side" in json_data:
        parsed_data["side"] = json_data["side"]
    if "quantity" in json_data:
        parsed_data["quantity"] = json_data["quantity"]
    if "price" in json_data:
        parsed_data["price"] = json_data["price"]
    return parsed_data
































    app = Flask(__name__)
app.debug = True
@app.route("/email", methods=['POST', 'GET'])
def handle_request():
    content_type = request.headers.get("Content-Type")
    if content_type != "application/json":
        # handle non-JSON content type
        # extract the body and parse it yourself
        body = request.data.decode("utf-8")
        try:
            data = json.loads(body)
        except json.JSONDecodeError:
            # handle error in parsing non-JSON content type as JSON
            return "Error: Unable to parse non-JSON content type as JSON", 400
        # do something with the parsed data
        return "Non-JSON content type: {}".format(content_type), 200
    else:
        # handle JSON content type
        # request.get_json() method will parse the body as JSON
        data = request.get_json()
        # do something with the parsed JSON data
        return "JSON content type: {}".format(content_type), 200
def parse_json_data(email_body):
    try:
        data = json.loads(email_body)
        account_symbol = data.get("account_symbol")
        account_side = data.get("account_side")
        account_volume = data.get("account_volume")
        order_price = data.get("order_price")

        response = {}
        response['account_symbol'] = account_symbol
        response['account_side'] = account_side
        response['account_volume'] = account_volume
        response['order_price'] = order_price
        print(json.dumps(response))
        return response
    except json.JSONDecodeError as error:
        print("Error: Unable to parse JSON data.")
        print(error)

def getMsgs(servername="imap.gmx.com"):
    usernm = "skullze@gmx.com"
    passwd = "Mando321!"
    ssl_context = ssl.create_default_context(cafile=certifi.where())
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    conn = imaplib.IMAP4_SSL(servername, 993, ssl_context=ssl_context)
    conn.login(usernm, passwd)
    conn.select('INBOX', readonly=True)
    typ, data = conn.search(None, "UNSEEN", 'SUBJECT "alert:"')
    mail_ids = data[0].split()
    valid_mail_ids = [
    mail_id for mail_id in mail_ids if mail_id.strip().isalnum()]
    if not valid_mail_ids:
       return None
    mail_id = valid_mail_ids[0]
    typ, email_data = conn.fetch(mail_id, "(RFC822)")
    email_body = email_data[0][1].decode('utf-8')

    json_data = get_json_data(email_body)
    if json_data:
       parsed_data = parse_json_data()
       conn.logout()
       return parsed_data
    else:
       conn.logout()
    return None

def get_json_data(email_body):
    pattern = re.compile(r'{.*}')
    match = pattern.search(email_body)

    if match:
        # Extract the JSON data and parse it
        json_data = match.group()
        return json_data
    else:
    # Return None if no JSON data was found
        return None
def print(json_data):
    client = bybit.bybit(test=False, api_key="76QjbsflcrBdSZiSrU",
                     api_secret="SGAAHPUfQnTm1d1EX12ffVaizjbFA4iT32ps")
    if account_side and account_symbol and account_volume:
        print(client.Order.Order_new(side=account_side, symbol=account_symbol, order_type="limit",
        qty=account_volume, price=order_price, time_in_force="gtc").result())
    else:
        print("Cannot place order 'parsed_data' ")
  
    print(client.Order.Order_query(symbol='account_symbol').result())
# My Position
    print(client.Positions.Positions_myPosition(
            symbol=account_symbol).result())

if __name__ == '__main__':

 app.run(port=5003)










Error: Invalid Content-Type. Expected 'application/json'
app = Flask(__name__)
app.debug = True
@app.route("/email", methods=['POST', 'GET'])
def email_route():
    if request.content_type != 'application/json':
        return "Error: Invalid Content-Type. Expected 'application/json'"

    email_body = request.get_json()
    parsed_data = parse_json_data(email_body)
    if parsed_data:
        if "error" in parsed_data:
            return parsed_data["error"]
        else:
            return parsed_data
    else:
        return None
def parse_json_data(email_body):
 if request.content_type != 'application/json':
    return "Error: Invalid Content-Type. Expected 'application/json'"

 try:
    data = json.loads(email_body)
    account_symbol = data.get("account_symbol")
    account_side = data.get("account_side")
    account_volume = data.get("account_volume")
    order_price = data.get("order_price")

    response = {}
    response['account_symbol'] = account_symbol
    response['account_side'] = account_side
    response['account_volume'] = account_volume
    response['order_price'] = order_price
    print(json.dumps(response))
    return response
 except json.JSONDecodeError as error:
        print("Error: Unable to parse JSON data.")
        print(error)

 def getMsgs(servername="imap.gmx.com"):
     usernm = "skullze@gmx.com"
     passwd = "Mando321!"
     ssl_context = ssl.create_default_context(cafile=certifi.where())
     ssl_context.check_hostname = False
     ssl_context.verify_mode = ssl.CERT_NONE
     conn = imaplib.IMAP4_SSL(servername, 993, ssl_context=ssl_context)
     conn.login(usernm, passwd)
     conn.select('INBOX', readonly=True)
     typ, data = conn.search(None, "UNSEEN", 'SUBJECT "alert:"')
     mail_ids = data[0].split()
     valid_mail_ids = [
     mail_id for mail_id in mail_ids if mail_id.strip().isalnum()]
     if not valid_mail_ids:
        conn.logout()
        return None
     mail_id = valid_mail_ids[0]
     typ, email_data = conn.fetch(mail_id, "(RFC822)")
     email_body = email_data[0][1].decode('utf-8')

     json_data = get_json_data(email_body)
     if json_data:
        parsed_data = parse_json_data()
        conn.logout()
        return parsed_data
     else:
        conn.logout()
        return None

 def get_json_data(email_body):
    pattern = re.compile(r'{.*}')
    match = pattern.search(email_body)

    if match:
        # Extract the JSON data and parse it
        json_data = match.group()
        return json_data
    else:
    # Return None if no JSON data was found
        return None
 def print(get_json_data):
    client = bybit.bybit(test=False, api_key="76QjbsflcrBdSZiSrU",
                     api_secret="SGAAHPUfQnTm1d1EX12ffVaizjbFA4iT32ps")
    if account_side and account_symbol and account_volume:
        print(client.Order.Order_new(side=account_side, symbol=account_symbol, order_type="limit",
        qty=account_volume, price=order_price, time_in_force="gtc").result())
    else:
        print("Cannot place order 'parsed_data' ")
  
    print(client.Order.Order_query(symbol='account_symbol').result())
# My Position
    print(client.Positions.Positions_myPosition(
            symbol=account_symbol).result())

if __name__ == '__main__':

 app.run(port=5003)
 
 
 
 










app = Flask(__name__)
app.debug = True
@app.route("/email", methods=['POST', 'GET'])
def email_route():
    if request.content_type != 'application/json':
        return "Error: Invalid Content-Type. Expected 'application/json'"

    email_body = request.get_json()
    parsed_data = parse_json_data(email_body)
    if parsed_data:
        if "error" in parsed_data:
            return parsed_data["error"]
        else:
            return parsed_data
    else:
        return None
def parse_json_data():
 if request.content_type != 'application/json':
    return "Error: Invalid Content-Type. Expected 'application/json'"

email_body = request.get_json()
try:
    data = json.loads(email_body)
    account_symbol = data.get("account_symbol")
    account_side = data.get("account_side")
    account_volume = data.get("account_volume")
    order_price = data.get("order_price")

    response = {}
    response['account_symbol'] = account_symbol
    response['account_side'] = account_side
    response['account_volume'] = account_volume
    response['order_price'] = order_price
    print(json.dumps(response))
except json.JSONDecodeError as error:
        print("Error: Unable to parse JSON data.")
        print(error)

def getMsgs(servername="imap.gmx.com"):
 usernm = "skullze@gmx.com"
 passwd = "Mando321!"
 ssl_context = ssl.create_default_context(cafile=certifi.where())
 ssl_context.check_hostname = False
 ssl_context.verify_mode = ssl.CERT_NONE
 conn = imaplib.IMAP4_SSL(servername, 993, ssl_context=ssl_context)
 conn.login(usernm, passwd)
 conn.select('INBOX', readonly=True)
 typ, data = conn.search(None, "UNSEEN", 'SUBJECT "alert:"')
 mail_ids = data[0].split()
 valid_mail_ids = [
 mail_id for mail_id in mail_ids if mail_id.strip().isalnum()]
 if not valid_mail_ids:
    return None
 mail_id = valid_mail_ids[0]
 typ, email_data = conn.fetch(mail_id, "(RFC822)")
 email_body = email_data[0][1].decode('utf-8')

 json_data = get_json_data(email_body)
 if json_data:
    parsed_data = parse_json_data()
    conn.logout()
    return parsed_data
 else:
    conn.logout()
    return None

def get_json_data(email_body):
 pattern = re.compile(r'{.*}')
 match = pattern.search(email_body)

 if match:
        # Extract the JSON data and parse it
    json_data = match.group()
    return json_data
 else:
    # Return None if no JSON data was found
    return None

client = bybit.bybit(test=False, api_key="76QjbsflcrBdSZiSrU",
                     api_secret="SGAAHPUfQnTm1d1EX12ffVaizjbFA4iT32ps")
if account_side and account_symbol and account_volume:
    print(client.Order.Order_new(side=account_side, symbol=account_symbol, order_type="limit",
        qty=account_volume, price=order_price, time_in_force="gtc").result())
else:
        print("Cannot place order 'parsed_data' ")
  
print(client.Order.Order_query(symbol='account_symbol').result())
# My Position
print(client.Positions.Positions_myPosition(
            symbol=account_symbol).result())

if __name__ == '__main__':

 app.run(port=5003)






def email_route():
    if request.content_type != 'application/json':
        return "Error: Invalid Content-Type. Expected 'application/json'"

    email_body = request.get_json()
    parsed_data = parse_json_data(email_body)
    if parsed_data:
        if "error" in parsed_data:
            return parsed_data["error"]
        else:
            return parsed_data
    else:
        return None



import imaplib
import re
import ssl
import certifi
import bybit
import json
from flask import Flask, request

app = Flask(__name__)
app.debug = True
@app.route("/email", methods=['POST', 'GET'])
def parse_json_data():
 if request.content_type != 'application/json':
    return "Error: Invalid Content-Type. Expected 'application/json'"

email_body = request.get_json()
try:
    data = json.loads(email_body)
    account_symbol = data.get("account_symbol")
    account_side = data.get("account_side")
    account_volume = data.get("account_volume")
    order_price = data.get("order_price")

    response = {}
    response['account_symbol'] = account_symbol
    response['account_side'] = account_side
    response['account_volume'] = account_volume
    response['order_price'] = order_price
    print(json.dumps(response))
except json.JSONDecodeError as error:
        print("Error: Unable to parse JSON data.")
        print(error)

def getMsgs(servername="imap.gmx.com"):
 usernm = "skullze@gmx.com"
 passwd = "Mando321!"
 ssl_context = ssl.create_default_context(cafile=certifi.where())
 ssl_context.check_hostname = False
 ssl_context.verify_mode = ssl.CERT_NONE
 conn = imaplib.IMAP4_SSL(servername, 993, ssl_context=ssl_context)
 conn.login(usernm, passwd)
 conn.select('INBOX', readonly=True)
 typ, data = conn.search(None, "UNSEEN", 'SUBJECT "alert:"')
 mail_ids = data[0].split()
 valid_mail_ids = [
 mail_id for mail_id in mail_ids if mail_id.strip().isalnum()]
 if not valid_mail_ids:
    return None
 mail_id = valid_mail_ids[0]
 typ, email_data = conn.fetch(mail_id, "(RFC822)")
 email_body = email_data[0][1].decode('utf-8')

 json_data = get_json_data(email_body)
 if json_data:
    parsed_data = parse_json_data()
    conn.logout()
    return parsed_data
 else:
    conn.logout()
    return None

def get_json_data(email_body):
 pattern = re.compile(r'{.*}')
 match = pattern.search(email_body)

 if match:
        # Extract the JSON data and parse it
    json_data = match.group()
    return json_data
 else:
    # Return None if no JSON data was found
    return None

client = bybit.bybit(test=False, api_key="76QjbsflcrBdSZiSrU",
                     api_secret="SGAAHPUfQnTm1d1EX12ffVaizjbFA4iT32ps")
if account_side and account_symbol and account_volume:
    print(client.Order.Order_new(side=account_side, symbol=account_symbol, order_type="limit",
        qty=account_volume, price=order_price, time_in_force="gtc").result())
else:
        print("Cannot place order 'parsed_data' ")
    
#        if "error" in result()
    # Delete the data file on failure
#    os.remove("trade_data.txt")
#    print(order["error"]["message"])
# else:
#    # Delete the data file on success
#    os.remove("trade_data.txt")
#    print("Order placed successfully")
# Cancel the order
# print(client.Order.Order_cancel(symbol=symbol, order_id=order_id).result())

# Cancel All Active Orders
# print(client.Order.Order_cancelAll(symbol=symbol).result())

# Replace Active Order
# print(client.Order.Order_replace(symbol=symbol,
#      order_id=order_id, qty=account_qty).result())
# Query Active Orders(real-time)
print(client.Order.Order_query(symbol='account_symbol').result())
# My Position
print(client.Positions.Positions_myPosition(
            symbol=account_symbol).result())

if __name__ == '__main__':

 app.run(port=5003)

# If the order is filled, print a message
# if _myPosition == True:
#    print("Order Active")
# else:
#   print("Order not filled.")
